// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator zod {
  provider                         = "zod-prisma-types"
  useMultipleFiles                 = true
  writeBarrelFiles                 = true
  createOptionalDefaultValuesTypes = true
  createRelationsValuesTypes       = true
  createPartialTypes               = true
}

model User {
  id                Int                @id @default(autoincrement())
  /// @zod.string.min(1).max(30)
  userName          String             @unique @map("user_name") @db.VarChar(30)
  /// @zod.string.email().min(1).max(255)
  email             String             @unique @db.VarChar(255)
  password          String
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @default(now()) @updatedAt @map("updated_at")
  articles          Article[]
  userOrganizations UserOrganization[]

  @@index([email])
  @@index([userName])
  @@map("users")
}

model Article {
  id        Int      @id @default(autoincrement())
  /// @zod.string.min(1).max(100)
  title     String   @db.VarChar(100)
  /// @zod.string.min(1)
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  userId         Int           @map("user_id")
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizationId Int?          @map("organization_id")
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  articleTags    ArticleTag[]

  @@index([userId])
  @@index([organizationId])
  @@map("articles")
}

model Tag {
  id          Int          @id @default(autoincrement())
  /// @zod.string.min(1).max(30)
  name        String       @unique @db.VarChar(30)
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @default(now()) @updatedAt @map("updated_at")
  articleTags ArticleTag[]

  @@index([name])
  @@map("tags")
}

model ArticleTag {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  articleId Int     @map("article_id")
  tagId     Int     @map("tag_id")
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@index([articleId])
  @@index([tagId])
  @@map("article_tags")
}

model Organization {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  /// @zod.string.min(1).max(30)
  name              String             @unique @db.VarChar(30)
  userOrganizations UserOrganization[]
  articles          Article[]

  @@map("organizations")
}

model UserOrganization {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  userId         Int          @map("user_id")
  organizationId Int          @map("organization_id")
  role           Role         @default(MEMBER)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([organizationId])
  @@map("user_organizations")
}

enum Role {
  ADMIN
  MEMBER
}
